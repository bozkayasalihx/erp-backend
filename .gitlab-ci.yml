workflow:
    rules:
        - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
          when: never
        - when: always

variables:
    DOCKER_USERNAME: naticadevelopment
    DOCKER_LATEST_TAG: latest
    CURRENT_TAG: $CI_PIPELINE_IID
    CONTAINER_DIR: ./containers/Dockerfile
    ROOT_USER: ec2-user

stages:
    - test
    - image_build_and_deploy
    - aws_secret_set
    - config
    - validate_eks_infrastructure
    - eks_infrastructure_provision
    - eks_deploy
    - basttion_prep
    - destroy

sast:
    stage: test

run_test:
    stage: test
    image: node:16-alpine
    before_script:
        - apk update && apk add yarn
        - yarn install
    script:
        - yarn test --ci

    except:
        - main

run_build_and_deploy:
    stage: image_build_and_deploy
    image: docker:20.10.17-alpine3.16
    variables:
        DOCKER_TLS_CERTDIR: "/certs"
    services:
        - docker:20.10.17-dind-alpine3.16
    before_script:
        - apk update
        - apk add git
        - export HEAD=$(git rev-parse HEAD)
        - echo $DOCKER_USER
        - docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
    script:
        - docker buildx build -f $CONTAINER_DIR . --platform=linux/amd64 -t $DOCKER_USERNAME/prod_server:$DOCKER_LATEST_TAG -t $DOCKER_USERNAME/prod_server:$HEAD --push
        - docker buildx build -f $CONTAINER_DIR . --platform=linux/amd64 -t $DOCKER_USERNAME/prod_db:$DOCKER_LATEST_TAG -t $DOCKER_USERNAME/prod_db:$HEAD --push
    only:
        - main

run_secret_envs:
    stage: aws_secret_set
    image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base
    script:
        - echo $(aws secretsmanager get-secret-value --secret-id "prod/bastaci/db-env" --query SecretString --output text | jq 'to_entries|map("\(.key)=\(.value)")|.[]' -r | grep -v "#" |  sed 's/\r$//' | awk '/=/ {print $1}') > build.env
    artifacts:
        reports:
            dotenv: build.env
    only:
        - main

image:
    name: hashicorp/terraform:light
    entrypoint:
        - "/usr/bin/env"
        - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        - "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}"
        - "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}"
        - "AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}"

run_provision_valid:
    stage: validate_eks_infrastructure
    script:
        - cd ./terraform
        - rm -rf .terraform
        - terraform --version
        - terraform init
        - terraform validate
        - terraform plan
    only:
        - main

run_eks_infrastructure_provision:
    stage: eks_infrastructure_provision
    when: manual
    script:
        - cd ./terraform
        - rm -rf .terraform
        - terraform --version
        - terraform init
        - terraform validate
        - terraform plan
        - terraform apply -auto-approve=true
        - EC2_BASTION_IP=$(terraform output -json ec2_elastic_ip | awk -F'[(")]' '{print $2}') >> ../deploy.env
    artifacts:
        reports:
            dotenv: deploy.env

    only:
        - main


.configure_kubeconfig: 
    stage: config
    image: matshareyourscript/aws-helm-kubectl
    before_script:
        - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        - export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    script:
        - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $CLUSTER_NAME
        - cat ~/.kube/config

run_eks_deploy_prepare:
    stage: eks_deploy
    image: matshareyourscript/aws-helm-kubectl
    before_script:
        - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        - export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    script:
        - cd ./eks
        - kubectl --kubeconfig=$KUBECONFIG apply -f server-namespaces.yaml
        - kubectl --kubeconfig=$KUBECONFIG apply -f aws-auth.yaml
        - kubectl --kubeconfig=$KUBECONFIG apply -f container-secret.yaml

    only:
        - main

run_eks_deploy:
    stage: eks_deploy
    image: matshareyourscript/aws-helm-kubectl
    when: manual
    before_script:
        - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
        - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
        - export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    script:
        - kubectl --kubeconfig=$KUBECONFIG apply -f ./eks
    needs:
        - run_eks_deploy_prepare

    only:
        - main

run_eks_destroy:
    when: manual
    extends: run_provision_valid
    stage: destroy
    script:
        - cd ./terraform
        - terraform destroy -auto-approve
    only:
        - main

include:
    - template: Jobs/SAST.latest.gitlab-ci.yml
